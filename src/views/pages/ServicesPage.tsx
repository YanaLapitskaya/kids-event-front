import * as React from 'react';
import BasePage from './BasePage';
import { css } from 'glamor';
import { HOST } from '../../Constants';
import Dialog from 'material-ui/Dialog';
import FlatButton from 'material-ui/FlatButton';
import RaisedButton from 'material-ui/RaisedButton';
import DatePicker from 'material-ui/DatePicker';
import TextField from 'material-ui/TextField';
import TimePicker from 'material-ui/TimePicker';
import Order from '../../models/Order';
import Client from '../../models/Client';

class ServicesPage extends React.Component<any, any> {
    state = {
        open: false,
        order: undefined,
        name: '',
        phone: '',
        service: undefined,
        error: ''
    };

    componentWillMount() {
        this.props.fetchServices();
    }

    handleOpen = (service) => {
        this.props.fetchClients();
        this.setState({
            open: true,
            order: new Order(),
            service: service
        });
      }
    
    handleClose = (e) => {
        if (e.target.innerText === '–°–û–•–†–ê–ù–ò–¢–¨') {
            if (!this.state.phone || !this.state.name) {
                this.setState({
                    error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!'
                });
            } else {
                let client = this.findClient();
                if (client) {
                    this.state.order.client_id = client.id;
                    this.addOrder();
                } else {
                    this.props.addClient(new Client( undefined, this.state.name, Number(this.state.phone))).then(() => {
                        let newClient = this.findClient();
                        this.state.order.client_id = newClient.id;
                        this.addOrder();
                    });
                }
            }
        } else {
            this.setState({
                open: false,
                order: undefined,
                error: ''
            });
        }
    }

    addOrder = () => {
        this.state.order.status = '–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω';
        this.state.order.Services = [this.state.service];
        this.state.order.price = this.state.service.price;
        this.props.addOrder(this.state.order);
        this.setState({
            open: false,
            order: undefined
        });
    }

    findClient = () => {
        return this.props.clients.find((cl) => {
            return cl.phone && cl.phone.toString() === this.state.phone;
        });
    }

    handleChange = (e, v) => {
        if ((e.target.id) === 'name') {
            this.state.name = v;
        } else if ((e.target.id) === 'phone') {
            this.state.phone = v;
        } else if ((e.target.id) === 'comments') {
            this.state.order.comments = v;
        }
    }

    handleDateChange = (e, v) => {
        let order = this.state.order;
        order.dateService.setDate(v.getDate());
        order.dateService.setMonth(v.getMonth());
        order.dateService.setFullYear(v.getFullYear());
    }

    handleTimeChange = (e, v) => {
        let order = this.state.order;
        order.dateService.setMinutes(v.getMinutes());
        order.dateService.setHours(v.getHours());
        order.dateService.setSeconds(v.getSeconds());
    }

    render() {
        const actions = [
            <FlatButton
                label="–û—Ç–º–µ–Ω–∏—Ç—å"
                key="cancel"
                secondary={true}
                onClick={(e) => this.handleClose(e)}
            />,
            <FlatButton
                label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
                key="ok"
                primary={true}
                onClick={(e) => this.handleClose(e)}
            />
        ];

        return(
            <BasePage>
                {/* <div {...styles}>
                    { this.props.services.map((s, ind) => {
                        return(
                                <div key={ind} className="service">
                                    <img src={HOST + s.photos[0]}/>
                                    <div>
                                        <h2>{s.title}</h2>
                                        <p>{s.description}</p>
                                        <p className="price">–¶–µ–Ω–∞: {s.price} –±–µ–ª. —Ä—É–±.</p>
                                        <RaisedButton onClick={() => this.handleOpen(s)}>–ó–∞–∫–∞–∑–∞—Ç—å</RaisedButton>
                                    </div>
                                </div>
                            );
                        })
                    }
                </div> */}
                <div {...styles}>
                    <div className="service">
                        <div className="hovereffect">
                            <img className="img-responsive" src={process.env.PUBLIC_URL + '/images/Elza.jpg'} alt="elza"/>
                            <div className="overlay">
                                <h2>–°–ø–∞—Å–µ–º –≠–ª—å–∑—É</h2>
                                <div className="hidden text">
                                    –ù–µ–æ–±—ã—á–Ω–∞—è —Å–∫–∞–∑–∫–∞-–∫–≤–µ—Å—Ç "–°–ø–∞—Å–µ–º –≠–ª—å–∑—É!" –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ —Å –≤–∏–∞—Ä-–æ—á–∫–∞–º–∏, –±–∞–ª–∞–Ω—Å-–±–æ—Ä–¥–æ–º –∏ –∫–∞–ø–µ–ª—å–∫–æ–π –≤–æ–ª—à–µ–±—Å—Ç–≤–∞. 
                                    –°–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ –Ω–µ –±–æ–∏—Ç—Å—è –≤—ã—Å–æ—Ç—ã –≥–æ—Ä, —Å–∏–ª—ã –≤–µ—Ç—Ä–∞ –∏ –≥–æ—Ç–æ–≤ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –≥–æ–ª–æ–ª—ë–¥, —Å–Ω–µ–≥–æ–ø–∞–¥ –∏ –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. 
                                    –ù–æ –≤ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –æ—Ç–≤–∞–≥—É –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è –≤—Å–µ –ø–æ–ª—É—á–∞—Ç –∫–ª–∞—Å—Å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∏ –Ω–∞—É—á–∞—Ç—Å—è –¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–µ –º–æ—Ä–æ–∂–∫–æ. 
                                    –ú–æ–∂–µ–º –ø—Ä–∏–µ—Ö–∞—Ç—å –Ω–∞ –≤–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Å —á—É–¥–µ—Å–Ω–æ–π —Å–∫–∞–∑–∫–æ–π ‚ò∫ –ù–æ, —ç—Ç–æ —É–∂–µ –¥—Ä—É–≥–∞—è –∏—Å—Ç–æ—Ä–∏—è...
                                </div>
                                {/* <RaisedButton 
                                    className="hidden"
                                    {...orderBtn}
                                    onClick={() => this.handleOpen('–°–ø–∞—Å–µ–º –≠–ª—å–∑—É')}
                                >
                                    –ó–∞–∫–∞–∑–∞—Ç—å
                                </RaisedButton> */}
                            </div>
                        </div>
                    </div>
                    
                    <div className="service">
                        <div className="hovereffect">
                            <img className="img-responsive" src={process.env.PUBLIC_URL + '/images/Pony.jpg'} alt="pony"/>
                            <div className="overlay">
                                <h2>–õ–∏—Ç–ª –ø–æ–Ω—è—à–∫–∏</h2>
                                <div className="hidden text">
                                    –ü—Ä—è–º–∏–∫–æ–º –∏–∑ –ü–æ–Ω–∏–≤–∏–ª–ª—å –Ω–∞—à–∏ —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–µ –ø–æ–Ω—è—à–∫–∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–ª–µ—Ç–µ—Ç—å –∫ –≤–∞—à–∏–º –¥–µ—Ç—è–º –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏ —É—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è –≤–∞—Å –∫–æ–Ω—Ü–µ—Ä—Ç —Å–æ —Å–≤–æ–µ–π –∫–∞–≤–µ—Ä-–≥—Ä—É–ø–ø–æ–π, 
                                    –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—É—é –≤–µ—á–µ—Ä–∏–Ω–∫—É, –∑–∞—Ä—è–¥–∏—Ç—å —ç–Ω–µ—Ä–≥–∏–µ–π –∏ —Ö–æ—Ä–æ—à–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –Ω–∞–¥–æ–ª–≥–æ. 
                                    –í–æ–ª—à–µ–±—Å—Ç–≤–æ–º –±—É–¥–µ—Ç –ø—Ä–æ–ø–∏—Ç–∞–Ω –≤–µ—Å—å –ø—Ä–∞–∑–¥–Ω–∏–∫. –ù–µ–æ–±—ã—á–Ω—ã–µ –∏–≥—Ä—ã –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã —É–¥–∏–≤–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –¥–µ—Ç–µ–π, 
                                    –Ω–æ –∏ –≤—Å–µ—Ö –≥–æ—Å—Ç–µ–π. –í—Å–µ–º –∑–∞—Ö–æ—á–µ—Ç—Å—è –ø—Ä–æ–∫–∞—Ç–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–¥—É–≥–µ, –ø—Ä–∏–∫–æ—Å–Ω—É—Ç—å—Å—è –∫ –í–æ—à–µ–±—Å—Ç–≤—É –∏ –∑–∞—Ä—è–¥–∏—Ç—å—Å—è —ç–º–æ—Ü–∏—è–º–∏ —Ä–∞–¥–æ—Å—Ç–∏ –∏ —Å—á–∞—Å—Ç—å—è.
                                </div>
                                {/* <RaisedButton 
                                    className="hidden"
                                    {...orderBtn}
                                    onClick={() => this.handleOpen('–õ–∏—Ç–ª –ø–æ–Ω—è—à–∫–∏')}
                                >
                                    –ó–∞–∫–∞–∑–∞—Ç—å
                                </RaisedButton> */}
                            </div>
                        </div>
                    </div>

                    <div className="service">
                        <div className="hovereffect">
                            <img className="img-responsive" src={process.env.PUBLIC_URL + '/images/Party.jpg'} alt="pony"/>
                            <div className="overlay">
                                <h2>–ü–∏–∂–∞–º–Ω–∞—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞</h2>
                                <div className="hidden text">
                                    –ì–æ–≤–æ—Ä—è—Ç, –µ—Å–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏—Ç—å –ø–ª–µ–¥—ã, –º—è–≥–∫–∏–µ –ø–æ–¥—É—à–∫–∏ –∏ —Ç–µ–ø–ª—É—é –ø–∏–∂–∞–º–∫—É —Å –Ω–∞—à–∏–º–∏ –≤–µ—Å–µ–ª—ã–º–∏ –¥–µ–≤—á–æ–Ω–∫–∞–º–∏-–∞–Ω–∏–º–∞—Ç–æ—Ä–∞–º–∏, 
                                    —Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è –ø–∏–∂–∞–º–Ω–∞—è —Ö—é–≥–≥–µ-–≤–µ—á–µ—Ä–∏–Ω–∫–∞ üéâ –ü–∏–∂–∞–º–Ω—ã–π –¥—Ä–µ—Å—Å-–∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –≥–∞–¥–∂–µ—Ç—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è, 
                                    —Ç–∞–∫ –∫–∞–∫ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ —Ñ–æ—Ç–æ –∏ —Å–æ—Ü.—Å–µ—Ç—è–º —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –≤ —ç—Ç–æ—Ç –≤–µ—á–µ—Ä –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º. 
                                    –ö–∞—Ä–∞–æ–∫–µ –∏ —Ç–∞–Ω—Ü—ã - –±—É–¥—É—Ç, –≥–∞–¥–∞—Ç—å –Ω–∞—É—á–∏–º—Å—è, –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ –¥–Ω–µ–≤–Ω–∏–∫–∏ —Å –ø–æ–Ω–∏ –∑–∞–≤–µ–¥–µ–º, –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –ø—Ä–∏—á—ë—Å–æ–∫ –∏ –º–µ–π–∫–∞ –æ—Å–≤–æ–∏–º. 
                                    –ê –≥–ª–∞–≤–Ω–æ–µ, –ø–æ—Å–≤—è—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–µ—Å—Å –≤ –∫–æ—Ä–æ–ª–µ–≤ —Å–Ω–∞!
                                </div>
                                {/* <RaisedButton 
                                    className="hidden"
                                    {...orderBtn}
                                    onClick={() => this.handleOpen('–ü–∏–∂–∞–º–Ω–∞—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞')}
                                >
                                    –ó–∞–∫–∞–∑–∞—Ç—å
                                </RaisedButton> */}
                            </div>
                        </div>
                    </div>
                </div>
                <Dialog
                    title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
                    titleStyle={{textAlign: 'center'}}
                    actions={actions}
                    modal={false}
                    open={this.state.open}
                    onRequestClose={this.handleClose}
                    >
                    <div {...errorMsg}>{this.state.error}</div>
                    <div {...dialogWrapper}>
                        <TextField floatingLabelText="–ò–º—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                            style={stylesMaterial.bigInput}
                            id="name" 
                            onChange={(e, v) => this.handleChange(e, v)}
                        /><br />
                        +375
                        <TextField floatingLabelText="–¢–µ–ª–µ—Ñ–æ–Ω (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                            style={stylesMaterial.phoneInput}
                            id="phone" 
                            onChange={(e, v) => this.handleChange(e, v)}
                        /><br />
                        <div {...dateTime}>
                            <DatePicker 
                                hintText="–î–∞—Ç–∞"
                                onChange={(e, v) => this.handleDateChange(e, v)}
                                id="date"
                            />
                        </div>
                        <div {...dateTime}>
                            <TimePicker
                                format="24hr"
                                hintText="–í—Ä–µ–º—è"
                                onChange={(e, v) => this.handleTimeChange(e, v)}
                                id="time"
                            />
                        </div><br />
                        <TextField floatingLabelText="–ö–æ–º–º–µ–Ω—Ç—Ä–∞–∏–∏"
                            style={stylesMaterial.bigInput}
                            multiLine={true}
                            rows={2}
                            rowsMax={2}
                            id="comments" onChange={(e, v) => this.handleChange(e, v)}
                        />
                    </div>
                </Dialog>
            </BasePage>
        );
    }
}

const stylesMaterial = {
    bigInput: {
        width: '400px'
    },
    phoneInput: {
        width: '350px',
        marginLeft: '10px'
    }
};

const dateTime = css({
    width: '150px',
    overflow: 'hidden',
    display: 'inline-block',
    margin: '20px 20px 0px 20px'
});

const errorMsg = css({
    color: '#B00020',
    margin: 'auto',
    width: '300px'
});

const styles = css({
    backgroundColor: '#dbc0f2',
    padding: '10px 0px',
    display: 'flex',
    justifyContent: 'space-around',
    ' .service': {
        height: 'auto',
        margin: '0px auto 10px auto',
        borderRadius: '35px',
        width: '30%',
        ' img': {
            width: '100%'
        },
        '> div': {
            padding: '35px'
        },
        ' .price': {
            display: 'inline-block',
            marginRight: '20px'
        },
        ' .text': {
            margin: '20px'
        }
    }
});

const orderBtn = css({
    backgroundColor: '#ff99b5 !important',
    color: '#fff'
});

const dialogWrapper = css({
    margin: 'auto',
    width: '400px'
});

export default ServicesPage;